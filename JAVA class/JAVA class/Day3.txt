1)What is JAVA
	
        *Simple programming language
        *Java is open source and easy to learn
        *Writing, Compiling and debugging Is easy
	*It can be reusable

2)History of java

	*James Gosling(Father of Java)initiated the Java language project in June 1991
	*Firstly, it was called "Greentalk" and its file extension was .gt 
	*After that, it was called Oak and was developed as a part of the Green project
	*Oak is a symbol of strength and chosen as a national tree of many countries like the U.S.A., France, Germany, Romania, etc.
	*In 1995, Oak was renamed as "Java"

3)Features
	
        *Platform Independent---> Java compiler converts Source code to Byte code in any platform.
	*Open source---> Free Of Cost
	*Secure---> virtual firewall between Application & Computer
	*Multi-thread---> eg.(ticket booking)
	*Multi-tasking---> eg.(Whats App)
	*Portable---> WORA (Write Once Run Anywhere)

4)Java architecture

   JDK (Java Development Kit)
       To develop JAVA code
       Version 1.0 - 1.17
       Standard Version - 1.8
       JDK=JRE+JVM

   JRE (Java Run time environment)
       Helps to run program
       Contains pre-defined library files

   JVM (Java Virtual Machine)
       Used for memory allocation
       Not physically exist

5)Coding standard

Two Types:
         *PASCAL
         *CAMEL

    PASCAL---> Every word 1st letter must be Capital. [Project/Class Name]
           Eg: Employee_Details
   
    CAMEL---> every 1st word remaining word 1st letter must be capital.[Object/Method/Variable]
           Eg: employee_Detail_Capgemini

Package(org.name/com.name)

How to create the project:
      
      File---> New---> Java Project
      src---> New---> Package
      Package---> New---> Class

For program we need to download
           
        Eclipse 2019-12(Integrated Development Environment (IDE))---> R-Packages(Windows)
                Link:https://www.eclipse.org/downloads/packages/release/2019-12
        
        JDK 1.8 Standard Version
                Link:https://www.oracle.com/java/technologies/downloads/#java8-window
===============================================================================================================================================
1)Access Specifier

   *Public: Global Level Access. (inside and outside the package)
           Example: public class student()

   *Private: Class Level Access. (Inside the class only)
           Example: private class student {}

   *Protected: Same like public but to be used with “Extends” keyword
           Example: protected class student {}

   *Default: Package Level Access. (only inside the package)

2)Garbage Collections
	
        *Unreferenced objects are deleted automatically
	*Unwanted/ unused memory are deleted automatically
	*It is possible only in JAVA not in C, C++ etc

3)Data Types & Types
 
    Data types specify the different sizes and values that can be stored in the variable.
    Need to Declare it 
    1Byte---> 8 bit
        
 Data type has two types namely,

  Primitive: (Store directly)

      *Predefined
      *Can store only one value
      *There are no additional methods
      *Example Primitive Data Type:byte,short,int,long,float,double,boolean and char.('\u0000')

  Non-primitive: (Store based on reference)

      *Not-Predefined
      *Can store more than one value
      *It references a memory location which stores the Data. (Reference variables)
      *Example Non-Primitive Data Type:Strings,Arrays,Classes,Interface etc.

String---> Group of characters("__")eg (" Eswar67i@gmail.com ")
Array---> Collection of elements eg: string []s = {"ishu", "45", "A"}
Class---> Class consists of variables and methods and object

*********************************************************************************************************************************

Wraper Class: Convert data type into class object used in collection
[int --> integer & char --> character] a={"ishhu",12,'A',23.3F}
***********************************************************************************************************************************

4)OOPS Intoduction

  OOPS:Object Oriented Programming Structure
     The structure of implementation in which our programs are organized in the form of Class, Methods and Objects

  Oops Concepts:
	*Encapsulation
	*Inheritance
	*Polymorphism
	*Abstraction

5)Sample Program

  Class: 
     Collection of methods and objects
  
  Methods: 
     
       Set of actions to be performed
  
  Object: 	
     Instance of class
     new keyword- it allocates new memory
     it helps to call the method

Syntax: ClassName Obj.name/ref.name = new ClassName();		

Example:

Private void name_Company{    //signature part
System.out.println("greens")  //implementation part
}
public static void main(string[]args){
company c = new company(); //object
c.name_Company(); //method calling
}
================================================================================================================================================================
  OOPS:Object Oriented Programming Structure
     The structure of implementation in which our programs are organized in the form of Class, Methods and Objects

  Oops Concepts:
	*Encapsulation
	*Inheritance
	*Polymorphism
	*Abstraction

Encapsulation:
      Binding code and data together as a single entity (Information).

eg: WebDriver driver = new ChromeDriver(); 
    poja class (getters)

Inheritance:
      Accessing one class property into another class using “extends” keyword.

Types:

      Single Inheritance (1P,1C)
                Accessing one parent class property into one child class.

      Multiple Inheritance (2P,1C)
               It is impossible in Java
               It can be overcome by Interface
               More than two parent class properties accessed by one child class.

      Multilevel Inheritance(1P,2C) 
               One class property is accessed by one child class which is being accessed by 
               another child class.

      Hierarchical Inheritance(1P,2Cor more C) 
               One parent class property accessed by two (or) more child classes.

      Hybrid
               Combination of single and multiple Inheritances.