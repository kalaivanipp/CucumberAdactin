Collection :

	   A Group Of Objects is called Collection.

	   It is an Interface.

	   It Supports Dissimiliar datatype.

	   It Has Low Memory Wastage.

	   It doesn't have any Fixed Length.   


***********************************************************************************************
Types :

List ( Interface )

Set  ( Interface )

Queue ( Interface )

Map ( Separated Interface )



List  : 

	It is an Interface.

	It is a index based.

	it does allow duplicate values.

  	It Prints in insertion order.


Syntax :

		classname refname = new clasname();
		List <WrapperClass> refName = new (types of list) <WrapperClass>();

	where 

		
		Types of List -----> Class
		< > ----> Generics -----> For Type Safety.


***********************************************************************************************

							*****************List Types :********************* 

* Array List ( Class ) 								* Linked List  ( Class )                                * Vector  ( Class )
								
								
								

Array List :                                                                   				 Linked List :                

Syntax :									Syntax :
	 List <WrapperClass> refName = new ArrayList<WrapperClass> ();          List <WrapperClass> refName = 
												new LinkedList<WrapperClass> ();


	
Def : 										Def :							
	Searching And Retrieving is very easy.						Insertion And Deletion is Easy
	Insertion And Deletion is difficult						Searching And Retrieving is difficult.	
	ASynchronized. 								        ASynchronized. 
	Thread is not  Safe.... But fast Process				        Thread is not  Safe.... But fast Process



Vector List :

Synatx : 
	List <WrapperClass> refName = new Vector<WrapperClass> ();
	    
Definition :
	     Synchronized
	     Thread Safe ... But it is a slow process


**********************************************************************************************************************************************************************

List Methods : 


add()   size()    get()    set()   remove()  indexOf()   contains()    clear()   addAll()  retainAll()  removeAll()  


For Loop 


*************************************************************************************************************************************************************************
Set ( Interface ) :

		  It is A Interface.
		
		  It does not have any specific order.

		  It does not allow Duplicate values.

		  It is a value based.


Syntax : Set <WrapperClass> refName = new TypesOfSet <WrapperClass> ();
		  

Types : 

HashSet 

       LinkedHashSet

                    TreeSet

HashSet : 

	It Prints in Random Order.
	It will not allow Duplicate Values.
	It will allow Single null value . not a duplicate null values.

LinkedHashSet : 

	It Prints in Insertion Order.
	It will not allow Duplicate Values.
	It will allow Single null value . not a duplicate null values.

TreeSet : 

	It Prints in Ascending Order.
	It will not allow Duplicate Values.
	It will not allow even Single null value.


***************************************************************************************************************************************************************************

Map [ Interface ]

		It is A Key And Value Pair.
		
		Key + Value = One Entry

		Key ----> 

			it will not allow duplicate it can be override.
		
			it will allow override null [ duplicate ]                                                                                          

                		value ----->

   			 The value will allow duplicate

			 The value will allow the both null .


             	Map ----- > ( Curly Bases ) { }
 
Syntax : 

	Map<Key,Value> refName = new TypesOfMap<Key,Value > ();
eg :
	Map<Integer,String> m = new HashMap<Integer, String > ();

Types:

 Hashmap(c):
 	Linked hashmap(c):	
 		Treemap(c)
 			Hashtable(c)
 				concurrent hashmap(C)


Hashmap(c):

	 It is a random order(based on key)
	 Key will allows the only one Null
	 Value allow the duplicate null


Linked Hashmap:

	 Insertion order( based on key)
	 Key will allows the only one Null
	 Value allow the duplicate null

Syntex:

	Map<Integer, String> ex = new LinkedHashMap<Integer, String>()

TreeMap:
	 Ascending order(based on key)
	 Key won't allow Null(even single null)
	 Value allow the duplicate null

Syntex:

	Map<Integer, String> ex = new TreeMap<Integer, String>()

Hashtable:
	 Random order
	 Both key and values are ignore the Null

Syntex:
	Map<Integer, String> ex = new Hashtable<Integer, String>()

concurrent hashmap:
	
	Random order
	Both key and values are ignore the Null
Syntex:
	
	Map<Integer, String> ex = new ConcurrentHashMap<Integer, String>()


***********************************************************************************************************************************************************

Map Methods :


put()  size()   get()  keySet()   values()   containsKey()   containsValue()  entrySet()  


***********************************************************************************************************************************************************

Iterator                                                                         List Iterator

Used In Collection                                                       Used In List

Traverse in a forward direction                                  Traverse in a backward and forward direction


Iterator<> ref = listrefName.iterator()                         ListIterator<> ref = listrefName.listIterator()


next()                                                                                next()


					previous()
























		   













